name: Validate Reviewer Team on develop or master

on:
  pull_request:
    branches:
      - develop
      - main
    types: [opened, submitted, edited, reopened, synchronize]

jobs:
  validate-reviewer:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
      contents: read

    steps:
    - name: Use GitHub Script with PAT
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.PR_REVIEW_ACTION }}  # <- Use your PAT here
        script: |
          const prNumber = context.payload.pull_request.number;
          const repo = context.repo;
          const targetBranch = context.payload.pull_request.base.ref;

          const octokit = github;  // Already authenticated with PAT
          const reviews = await octokit.rest.pulls.listReviews({
            owner: repo.owner,
            repo: repo.repo,
            pull_number: prNumber
          });

          const uniqueApprovers = new Set(
            reviews.data
              .filter(r => r.state === 'APPROVED')
              .map(r => r.user.login)
          );

          const teamMembers = new Set();

          async function loadTeamMembers(teamSlug) {
            try {
              const members = await octokit.paginate(
                octokit.rest.teams.listMembersInOrg,
                {
                  org: repo.owner,
                  team_slug: teamSlug
                }
              );
              members.forEach(member => teamMembers.add(member.login));
            } catch (error) {
              core.setFailed(`üö® Failed to load team '${teamSlug}': ${error.message}`);
            }
          }

          if (targetBranch === 'main') {
            await loadTeamMembers('release'); // use actual slug
          } else if (targetBranch === 'develop') {
            await loadTeamMembers('release'); // use actual slug
            await loadTeamMembers('review');  // use actual slug
          } else {
            console.log(`Skipping validation for branch: ${targetBranch}`);
            return;
          }

          const approverFound = [...uniqueApprovers].some(user =>
            teamMembers.has(user)
          );

          if (!approverFound) {
            const teamNote = targetBranch === 'main'
              ? '@sabintest/release'
              : '@sabintest/review or @sabintest/release';

            core.setFailed(`‚ùå PR to '${targetBranch}' must be approved by at least one member of ${teamNote}.`);
          } else {
            console.log(`‚úÖ Approved by an authorized team member for '${targetBranch}' branch.`);
          }
