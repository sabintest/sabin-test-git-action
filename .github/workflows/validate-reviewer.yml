name: Validate Reviewer Team on develop or master

on:
  pull_request:
    branches:
      - develop
      - main
    types: [opened, edited, reopened, synchronize]

jobs:
  validate-reviewer:
    name: Validate Reviewer Team on develop or master
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
      contents: read

    steps:
      - name: Use GitHub Script to Validate Reviewer
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PR_REVIEW_ACTION }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const repo = context.repo;
            const targetBranch = context.payload.pull_request.base.ref;

            const octokit = github;

            const reviews = await octokit.rest.pulls.listReviews({
              owner: repo.owner,
              repo: repo.repo,
              pull_number: prNumber
            });

            // Only consider each user's latest review
            const latestReviewByUser = {};
            for (const review of reviews.data) {
              latestReviewByUser[review.user.login] = review.state;
            }

            const uniqueApprovers = new Set(
              Object.entries(latestReviewByUser)
                .filter(([_, state]) => state === 'APPROVED')
                .map(([user]) => user)
            );

            const teamMembers = new Set();

            async function loadTeamMembers(teamSlug) {
              try {
                const members = await octokit.paginate(
                  octokit.rest.teams.listMembersInOrg,
                  {
                    org: repo.owner,
                    team_slug: teamSlug
                  }
                );
                members.forEach(member => teamMembers.add(member.login));
              } catch (error) {
                core.setFailed(`üö® Failed to load team '${teamSlug}': ${error.message}`);
              }
            }

            if (targetBranch === 'main') {
              await loadTeamMembers('release');
            } else if (targetBranch === 'develop') {
              await loadTeamMembers('release');
              await loadTeamMembers('review');
            } else {
              console.log(`Skipping validation for branch: ${targetBranch}`);
              return;
            }

            const approverFound = [...uniqueApprovers].some(user =>
              teamMembers.has(user)
            );

            if (!approverFound) {
              const teamNote = targetBranch === 'main'
                ? '@sabintest/release'
                : '@sabintest/review or @sabintest/release';

              core.setFailed(`‚ùå PR to '${targetBranch}' must be approved by at least one member of ${teamNote}.`);
            } else {
              console.log(`‚úÖ Approved by an authorized team member for '${targetBranch}' branch.`);
            }

  set-branch-protection:
    name: Set Branch Protection
    if: github.event.pull_request.base.ref == 'main' || github.event.pull_request.base.ref == 'develop'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Set branch protection rules
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PR_REVIEW_ACTION }}
          script: |
            const branches = [
              {
                name: 'develop',
                requiredApprovingReviewCount: 1,
                pushRestrictions: ['review', 'release'],
              },
              {
                name: 'main',
                requiredApprovingReviewCount: 1,
                pushRestrictions: ['release'],
              }
            ];

            const org = context.repo.owner;
            const repo = context.repo.repo;

            for (const branchConfig of branches) {
              const { name: branch, requiredApprovingReviewCount, pushRestrictions } = branchConfig;

              let teams = [];
              for (const team of pushRestrictions) {
                try {
                  const teamData = await github.rest.teams.getByName({
                    org,
                    team_slug: team
                  });
                  teams.push(teamData.data.slug);
                } catch (error) {
                  core.setFailed(`‚ùå Failed to find team '${team}' in org '${org}': ${error.message}`);
                  return;
                }
              }

              await github.rest.repos.updateBranchProtection({
                owner: org,
                repo,
                branch,
                required_status_checks: {
                  strict: true,
                  contexts: ['Validate Reviewer Team on develop or master']
                },
                enforce_admins: true,
                required_pull_request_reviews: {
                  required_approving_review_count: requiredApprovingReviewCount
                },
                restrictions: {
                  users: [],
                  teams: teams
                },
                allow_force_pushes: false,
                allow_deletions: false
              });

              console.log(`‚úÖ Applied protection to '${branch}' with teams: ${teams.join(', ')}`);
            }
